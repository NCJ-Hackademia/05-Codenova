from flask import Flask, render_template, redirect, url_for, request, jsonify, flash, session
from pymongo import MongoClient
from werkzeug.security import generate_password_hash, check_password_hash
import os
import smtplib
from email.mime.text import MIMEText

app = Flask(
    __name__,
    static_folder=os.path.abspath(os.path.join(os.path.dirname(__file__), 'css')),
    template_folder=os.path.abspath(os.path.join(os.path.dirname(__file__), 'pages'))
)

# MongoDB connection
client = MongoClient("mongodb+srv://ml_dept_project:ml_dept_project@ml-project.gkigx.mongodb.net/")
db = client['livenfit']
users_collection = db['users']
design_collection = db['designs']

app.secret_key = 'your_secret_key'  # Set a strong secret key!

def send_email(subject, recipient, body):
    # This is a placeholder for a real email sending implementation.
    # In a production environment, use a robust email library like Flask-Mail
    # and secure credentials management (e.g., environment variables).
    sender_email = "noreply@livenfit.com"  # Use a generic sender
    
    # For demonstration, we'll just print the email content to the console.
    # This avoids needing real SMTP credentials for this exercise.
    print("--- Sending Email ---")
    print(f"To: {recipient}")
    print(f"From: {sender_email}")
    print(f"Subject: {subject}")
    print("--- Body ---")
    print(body)
    print("---------------------")
    # In a real implementation, the smtplib code would go here.
    # try:
    #     msg = MIMEText(body)
    #     msg['Subject'] = subject
    #     msg['From'] = sender_email
    #     msg['To'] = recipient
    #     with smtplib.SMTP("smtp.example.com", 587) as server:
    #         server.starttls()
    #         server.login("user", "password")
    #         server.send_message(msg)
    # except Exception as e:
    #     print(f"Failed to send email: {e}")

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/homepage')
def homepage():
    user_name = session.get('user_name', None)
    return render_template('homepage.html', user_name=user_name)

@app.route('/about')
def about():
    user_name = session.get('user_name', None)
    return render_template('about.html', user_name=user_name)

@app.route('/contact')
def contact():
    user_name = session.get('user_name', None)
    return render_template('contact.html', user_name=user_name)

@app.route('/design_form_portal', methods=['GET', 'POST'])
def design_portal():
    user_name = session.get('user_name', None)
    if request.method == 'POST':
        form_data = request.form.to_dict()
        
        # Set default values for family composition if not provided
        form_data.setdefault('children-count', '0')
        form_data.setdefault('couples-count', '0')
        form_data.setdefault('singles-count', '0')

        # Temporarily store data in the session
        session['design_form_data'] = form_data
        
        # Store the data in the database
        email = session.get('email')
        if email:
            form_data['user_email'] = email
            
            # Send email notification
            try:
                email_subject = "Your Live N Fit Design Submission"
                email_body = f"Hello {user_name},\n\nThank you for submitting your design preferences.\n\nHere is a summary of your submission:\n"
                for key, value in form_data.items():
                    # Sanitize key for display
                    display_key = key.replace('-', ' ').replace('_', ' ').title()
                    email_body += f"- {display_key}: {value}\n"
                email_body += "\nWe will review your design and get back to you shortly.\n\nBest regards,\nThe Live N Fit Team"
                
                send_email(email_subject, email, email_body)
                flash("Design submitted and a confirmation email has been sent.", "success")
            except Exception as e:
                flash(f"There was an error sending the confirmation email: {e}", "danger")

        design_collection.insert_one(form_data)
        return render_template('2d-design.html', form_data=form_data, user_name=user_name)
    return render_template('design_form_portal.html', user_name=user_name)
 
@app.route('/my_designs_gallery')
def designs_gallery():
    user_name = session.get('user_name', None)
    email = session.get('email')
    if email:
        user_designs = list(design_collection.find({'user_email': email}))
    else:
        user_designs = []
    return render_template('my_designs_gallery.html', user_name=user_name, designs=user_designs)

@app.route('/technology_deep_dive')
def tech_deep_dive():
    user_name = session.get('user_name', None)
    return render_template('technology_deep_dive.html', user_name=user_name)

@app.route('/pricing', methods=['GET', 'POST'])
def pricing():
    user_name = session.get('user_name', None)
    if request.method == 'POST':
        form_data = request.form.to_dict()
        # Simple price prediction logic (customize as needed)
        base_price = 1500  # per sq ft
        size = int(form_data.get('size-btn', 1000))
        floors = int(form_data.get('floor-btn', 1))
        style_factor = {
            'modern': 1.2,
            'traditional': 1.0,
            'contemporary': 1.1,
            'farmhouse': 1.05,
            'industrial': 1.15,
            'transitional': 1.08
        }
        style = form_data.get('style-btn', 'modern').lower()
        factor = style_factor.get(style, 1.0)
        price = int(size * floors * base_price * factor)
        return render_template('pricing.html', form_data=form_data, price=price, user_name=user_name)
    else:
        return render_template('pricing.html', form_data=None, price=None, user_name=user_name)

@app.route('/2d-design', methods=['GET', 'POST'])
def design_2d():
    user_name = session.get('user_name', None)
    if request.method == 'POST':
        form_data = request.form.to_dict()
        return render_template('2d-design.html', form_data=form_data, user_name=user_name)
    else:
        return render_template('2d-design.html', form_data=None, user_name=user_name)

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        data = request.get_json()
        email = data.get('email')
        password = data.get('password')

        user = users_collection.find_one({'email': email})
        if user and check_password_hash(user['password'], password):
            session['user_name'] = user['name']
            session['email'] = user['email']
            return jsonify({'message': 'Login successful'}), 200
        else:
            return jsonify({'error': 'Invalid email or password'}), 401

    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        data = request.get_json()
        name = data.get('name')
        email = data.get('email')
        password = data.get('password')

        if users_collection.find_one({'email': email}):
            return jsonify({'error': 'Email already registered'}), 400

        hashed_password = generate_password_hash(password)
        users_collection.insert_one({
            'name': name,
            'email': email,
            'password': hashed_password
        })
        return jsonify({'message': 'Registration successful'}), 200

    return render_template('register.html')

# Example API endpoint for family grid (POST)
@app.route('/api/family', methods=['POST'])
def family_api():
    data = request.json
    return jsonify({"status": "success", "received": data}), 200

if __name__ == '__main__':
    app.run(debug=True)
